#!/bin/bash


true=":"
false="/bin/false"
success=0
failure=1



# TODO
# - Write help


usage() {
    local progname=`basename $0`

    cat <<EOM
    Usage
        $progname [{options}] [--] [{script} [{file}]]

    Options
        -h
            Show help.
EOM

    exit 1
}

die() {
    echo "$@" >&2
    exit 1
}

decho() {
    $VERBOSE && echo "debug:" "$@" >&2
}

ALL_TEMPFILES=()
add_tempfiles() {
    [ $# = 0 ] && return
    for f in "$@"; do
        ALL_TEMPFILES=($ALL_TEMPFILES "$f")
    done
}

remove_all_tempfiles() {
    local x=$?
    for t in "${ALL_TEMPFILES[@]}"; do
        decho "removing tempfile $t..."
        rm -f "$t"
    done
    exit $x
}

get_tempfile() {
    local tempfile=`mktemp`
    add_tempfiles "$tempfile"
    echo "$tempfile"
}

vim_write() {
    echo "write"
}

vim_quit() {
    echo "qall!"
}

get_script() {
    # TODO: Capture output of :echo, :echomsg, :echoerr
    # and output to stdout, stderr.
    cat "$@" || exit $?
    $AUTO_WRITE && vim_write
    $AUTO_QUIT  && vim_quit
}

run_file() {
    [ $# -ge 2 ] || die "invalid args"

    local script="$1"
    shift
    decho "script to run: [$script]"
    local result_file=`get_tempfile`
    decho "Vim result output = $result_file"

    # Let Vim run $script!
    $EX -c "so $script" \
        -c "write! $result_file" \
        -c 'qa!' \
        "$@" >/dev/null 2>&1

    # Output Vim result output.
    cat "$result_file"
}

build_ex_command() {
    EX="ex"
    if $EX_COMPATIBLE; then
        EX="$EX -N"
    fi
    if [ ! -z "$EX_IEXRC" ]; then
        EX="$EX -u $EX_IEXRC"
    fi
    if [ ! -z "$EX_VIMINFO" ]; then
        EX="$EX -i $EX_VIMINFO"
    fi
    if $EX_NOPLUGIN; then
        EX="$EX --noplugin"
    fi
    if $EX_QUIET; then
        EX="$EX -"
    fi
    decho 'Build arguments with ex.' "$EX"
}

main() {
    # Remove all messed up tempfiles at exit...
    trap 'remove_all_tempfiles' EXIT

    build_ex_command

    local scripts
    scripts=()

    # Build script files from -e arguments
    # and add it to $scripts.
    local code s
    for code in "${EVAL_CODES[@]}"; do
        s=`get_tempfile`
        {
            echo "$code"
            $AUTO_WRITE && vim_write
            $AUTO_QUIT  && vim_quit
        } >"$s"
        scripts=($scripts "$s")
    done

    # Get the script file.
    if [ $# -ne 0 ]; then
        scripts=($scripts "$1")
        shift
    fi

    # If no scripts run, run interactive ex (like Python).
    if [ "${#scripts[@]}" -eq 0 ]; then
        EX_QUIET="$false"
        build_ex_command
        exec $EX
    fi

    # Run scripts.
    for s in "${scripts[@]}"; do
        run_file "$s" "$@"
    done
}


VERBOSE="$false"
AUTO_WRITE="$true"
AUTO_QUIT="$true"

if [ -f "$HOME/.iexrc" ]; then
    EX_IEXRC="$HOME/.iexrc"
else
    EX_IEXRC="NONE"
fi
EX_COMPATIBLE="$true"
EX_NOPLUGIN="$true"
EX_VIMINFO=NONE
EX_QUIET="$false"

EVAL_CODES=()


while getopts hvWQCpu:i:qe:s opt; do
    case $opt in
        v) VERBOSE="$true" ;;
        W) AUTO_WRITE="$false" ;;
        Q) AUTO_QUIT="$false" ;;
        C) EX_COMPATIBLE="$false" ;;
        p) EX_NOPLUGIN="$false" ;;
        u) EX_IEXRC="$OPTARG" ;;
        i) EX_VIMINFO="$OPTARG" ;;
        q) EX_QUIET="$true" ;;
        e) EVAL_CODES=("${EVAL_CODES[@]}" "$OPTARG") ;;
        h) usage ;;
        ?) usage ;;
    esac
done
shift `expr $OPTIND - 1`


main "$@"
