#!/bin/bash


true=":"
false="/bin/false"
success=0
failure=1



# TODO
# - Set up arguments
# - Write help


usage() {
    local progname=`basename $0`

    cat <<EOM
    Usage
        $progname [{options}] [--] [{script} [{file}]]

    Options
        -h
            Show help.
EOM

    exit 1
}

die() {
    echo "$@" >&2
    exit 1
}

decho() {
    $VERBOSE && echo "debug:" "$@" >&2
}

ALL_TEMPFILES=()
add_tempfiles() {
    [ $# = 0 ] && return
    register_remove_all_tempfiles
    for f in "$@"; do
        ALL_TEMPFILES=($ALL_TEMPFILES "$f")
    done
}

IS_REGISTERED_REMOVE_ALL_TEMPFILES="$false"
register_remove_all_tempfiles() {
    $IS_REGISTERED_REMOVE_ALL_TEMPFILES || {
        trap 'remove_all_tempfiles' HUP INT QUIT TERM
        IS_REGISTERED_REMOVE_ALL_TEMPFILES="$true"
    }
}

remove_all_tempfiles() {
    local x=$?
    $IS_REGISTERED_REMOVE_ALL_TEMPFILES && {
        for t in "$ALL_TEMPFILES"; do
            decho "cleaning up $f..."
            rm -f "$t"
        done
    }
    exit $x
}

get_clone_tempfile() {
    local tempfile=`tempfile`
    decho "tempfile: [$tempfile]"
    add_tempfiles "$tempfile"

    if [ $# = 0 ]; then
        cat
    else
        cat "$@"
    fi >"$tempfile" || exit $?
    echo "$tempfile"
}

get_tempfile() {
    local tempfile=`tempfile`
    decho "tempfile: [$tempfile]"
    add_tempfiles "$tempfile"

    if [ $# != 0 ]; then
        echo "$@" >"$tempfile"
    fi

    echo "$tempfile"
}

vim_write() {
    echo "write"
}

vim_quit() {
    echo "qall!"
}

get_script() {
    cat "$@" || exit $?
    $AUTO_WRITE && vim_write
    $AUTO_QUIT  && vim_quit
}

run_file() {
    [ $# -ge 2 ] || die "invalid args"

    local script="$1"
    shift
    decho "script: [$script]"

    local f tempfiles
    for f in "$@"; do
        local t=`get_clone_tempfile "$f"`
        tempfiles=($tempfiles "$t")
    done

    call_ex "$script" "$tempfiles"
    cat "$tempfiles"
}

call_ex() {
    local script="$1"
    shift
    cat "$script" | $EX "$@"
}

eval_code() {
    local files=()
    local f
    for f in "$@"; do
        files=($files "$f")
    done
    [ ${#files[*]} = 0 ] && {
        files=($(get_tempfile $(cat)))
    }
    local script=$(
        for e in $EVAL_SOURCES; do
            echo "$e"
        done
        $AUTO_WRITE && vim_write
        $AUTO_QUIT && vim_quit
    )
    run_file "$(get_tempfile "$script")" "$files"
}

build_ex_command() {
    EX="ex"
    if $EX_COMPATIBLE; then
        EX="$EX -N"
    fi
    if [ "$EX_IEXRC" != NONE -o "$EX_IEXRC" != NORC ]; then
        EX="$EX -u '$EX_IEXRC'"
    fi
    if $EX_NOPLUGIN; then
        EX="$EX --noplugin"
    fi
    if $EX_QUIET; then
        EX="$EX -"
    fi
    decho 'build_ex_command:' "$EX"
}

main() {
    build_ex_command
    if [ ${#EVAL_SOURCES[*]} != 0 ]; then
        decho "-e switch supplied:" "$EVAL_SOURCES"
        eval_code "$@"
        return 0
    fi
    case $# in
        0)
            EX_QUIET="$false"
            build_ex_command
            exec $EX
            ;;
        1)
            get_script "$1" | $EX
            ;;
        *)
            local script="$1"
            shift
            run_file "$(get_tempfile $(get_script "$script"))" "$@" ;;
    esac
}


VERBOSE="$false"
AUTO_WRITE="$true"
AUTO_QUIT="$true"
EX_COMPATIBLE="$true"
EX_NOPLUGIN="$true"
EX_IEXRC="$HOME/.iexrc"
EX_QUIET="$false"
EVAL_SOURCES=()


while getopts hvWQCpc:qe: opt; do
    case $opt in
        v) VERBOSE="$true" ;;
        W) AUTO_WRITE="$false" ;;
        Q) AUTO_QUIT="$false" ;;
        C) EX_COMPATIBLE="$false" ;;
        p) EX_NOPLUGIN="$false" ;;
        c) EX_IEXRC="$OPTARG" ;;
        q) EX_QUIET="$true" ;;
        e) EVAL_SOURCES=($EVAL_SOURCES "$OPTARG") ;;
        h) usage ;;
        ?) usage ;;
    esac
done
shift `expr $OPTIND - 1`


main "$@"
